@import url('https://fonts.googleapis.com/css?family=Montserrat:100');

::-webkit-scrollbar {
	width: 10px;
	
}
::-webkit-scrollbar-thumb {
	background-color: #64dcdc;
}
::-webkit-scrollbar-track {
	-webkit-box-shadow: inset 0 0 2px rgb(100, 220, 220);
	background-color: #218080;
}

html, body, h1 {
	padding: 0;
	margin: 0;
	font-family: 'Montserrat', sans-serif;
	overflow-x: hidden;
}

body{
	background: rgb(10,10,10);
	background: linear-gradient(rgba(10,10,10,.6),rgba(0,0,0,.9)), repeating-linear-gradient(0, transparent, transparent 2px, black 3px, black 3px),
	url('Pictures/wallpaper1.jpg') repeat;
/*url('https://images.unsplash.com/photo-1506399558188-acca6f8cbf41?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&ixid=eyJhcHBfaWQiOjE0NTg5fQ&s=7118759521e3184778a3b5e010e202c6') */
	background-size: cover;
	background-position: center;
	background-repeat: no-repeat;
	background-attachment: fixed;
}
a{
	text-decoration: none;
}

#app {
	height: 100vh;
	width: 100%;
	margin: 0;
	padding: 0;
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;

	z-index: 1;
}

#app2 {
	height: 100%;
	width: 100%;
	margin: 0;
	padding: 0;
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;

	z-index: 1;
}

#app3 {
	height: 100%;
	width: 100%;
	margin: 0;
	padding: 0;
	display: flex;
	flex-direction: column;
	justify-content: left;
	align-items: left;

	z-index: 1;
}

#wrapper2{
	margin-left: 15%;
	text-align: left;
  }

#wrapper3{
	text-align: left;
}

#description{
	text-align:left;
	color: lightgray;
}

#rowcontent{
	height: 600px;
	align-items: center;
}

#textcontent{
	margin-left: 75px;
}

#pendulumHolder{
    margin-top: 200px;
	margin-left: 250px;

}

/* Create two equal columns that floats next to each other */
.column {
	float: left;
	width: 50%;
	padding: 0px;
	text-align: center;
}

.column2 {
	float: left;
	width: 50%;
	padding: 0px;
	text-align: left;
}

.column3{
	float: left;
	width: 33%;
	padding: 0px;
	text-align: left;
}

.gamecolumn {
	float:left;
	width:33%;
	padding: 3%;
	text-align: center;
}
  
.row{
	display: flex;
	align-items: center;
	justify-content: center;
}

.row2{
	display: flex;
	align-items: left;
	justify-content: left;
}
  
/* Clear floats after the columns */
.row:after {
	content: "";
	clear: both;
}

.row2:after {
	content: "";
	display: table;
	clear: both;
  }

/* Responsive layout - makes the two columns stack on top of each other instead of next to each other */
@media screen and (max-width: 650px) {
	.column {
		width: 100%;
	}
	.gamecolumn{
		width:100%;
	}
  }

.sub {
	color: #64dcdc;
	letter-spacing: 1.25em;
}

.sub2 {
	color: #64dcdc;
}
  
.head {
	font-family: 'Valera', sans-serif;
	color: LightGray;
	letter-spacing: 0.4em;
}

.gamehead{
	font-family: 'Valera', sans-serif;
	color: LightGray;
	letter-spacing: 0.1em;
}

.active {
	margin-top: 1rem;
	opacity:0;
}

.active:hover {
	margin-top: 1rem;
	opacity: 100;
}
.static {
	margin-top: 1rem;
	width: 32px;
	position:absolute;
	z-index: -1;
  }
  
  .static:hover {
	margin-top: 1rem;
	opacity:0;
  }

 .avatar {
	width: 100px;
	border-radius: 50%;
  }   
/* Our mixin positions a copy of our text
directly on our existing text, while
also setting content to the appropriate
text set in the data-text attribute. */
@mixin glitchCopy { 
	content: attr(data-text);
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

.glitch {
	display: inline-block;
	position: relative;
	color: #64dcdc;
	font-size: 1.25em;
	letter-spacing: .5em;
}
.glitch:hover {
	/* Animation provies a slight random skew. Check bottom of doc
	for more information on how to random skew. */
	animation: glitch-skew 1s infinite linear alternate-reverse;

	// Creates a copy before our text. 
	&::before{
		// Duplicates our text with the mixin.
		@include glitchCopy;
		// Scoots text slightly to the left for the color offset.
		left: 2px;
		// Creates the color 'shadow' that happens on the glitch.
		text-shadow: -2px 0 #ff00c1;
		/* Creates an initial clip for our glitch. This works in
		a typical top,right,bottom,left fashion and creates a mask
		to only show a certain part of the glitch at a time. */
		clip: rect(44px, 450px, 56px, 0);
		/* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
		with an alternating animation to keep things fresh. */
		animation: glitch-anim 5s infinite linear alternate-reverse;
	}

	// Creates a copy after our text. Note comments from ::before.
	&::after {
		@include glitchCopy;
		left: -2px;
		text-shadow: -2px 0 LightGray, 2px 2px #ff00c1;
		animation: glitch-anim2 1s infinite linear alternate-reverse;
	}
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
$steps: 20;
@for $i from 0 through $steps {
#{percentage($i*(1/$steps))} {
  clip: rect(random(50)+px, 9999px, random(50)+px, 0);
		transform: skew((random(50) / 50) + deg);
}
}
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
$steps: 20;
@for $i from 0 through $steps {
#{percentage($i*(1/$steps))} {
  clip: rect(random(50)+px, 9999px, random(50)+px, 0);
		transform: skew((random(50) / 50) + deg);
}
}
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
$steps: 10;
@for $i from 0 through $steps {
#{percentage($i*(1/$steps))} {
  transform: skew((random(10) - 5) + deg);
}
}
}